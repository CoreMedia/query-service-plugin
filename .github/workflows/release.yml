name: Release
run-name: Release query-service in ${{ github.head_ref || github.ref_name }} (dry-run=${{ inputs.dry_run }})

on:
  workflow_dispatch:
    inputs:
      dry_run:
        type: boolean
        description: 'Dry run, disable for release'
        required: true
        default: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT_PUSH_FROM_GHA }}

      - name: Setup Git
        run: |
          git config --global user.name 'coremedia-ci'
          git config --global user.email 'coremedia-ci@coremedia.com'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: coremedia.external.releases
          server-username: PLUGINS_NEXUS_USER
          server-password: PLUGINS_NEXUS_PASSWORD
          cache: 'maven'

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8.6

      - name: Setup registry npm.coremedia.io
        run: |
          NPM_AUTH_TOKEN=$(curl -s -H "Accept: application/json" -H "Content-Type:application/json" -X PUT --data "{\"name\": \"${{ secrets.CM_NPM_USER }}\", \"password\": \"${{ secrets.CM_NPM_READ_ONLY_PASSWORD }}\"}" https://npm.coremedia.io/-/user/org.couchdb.user:${{ secrets.CM_NPM_USER }} | jq -r .token)
          echo "::add-mask::$NPM_AUTH_TOKEN"
          pnpm config set //npm.coremedia.io/:_authToken=$NPM_AUTH_TOKEN
          pnpm config set @coremedia:registry=https://npm.coremedia.io
          pnpm config set @jangaroo:registry=https://npm.coremedia.io

      - name: Install PNPM Dependencies
        working-directory: apps/studio-client
        run: pnpm install

      - name: Set Release Version
        id: set-release-version
        env:
          PLUGINS_NEXUS_USER: ${{ secrets.PLUGINS_NEXUS_USER }}
          PLUGINS_NEXUS_PASSWORD: ${{ secrets.PLUGINS_NEXUS_PASSWORD }}
        run: |
          mvn --batch-mode org.codehaus.mojo:versions-maven-plugin:2.8.1:set -DremoveSnapshot -DartifactId='*'
          release_version=$(mvn --batch-mode org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)

          cd apps/studio-client
          pnpm set-version ${release_version}
          cd ../..

          git add .
          git commit -m "set release version: ${release_version}"
          git tag "v${release_version}"
          echo "version=${release_version}" >> $GITHUB_OUTPUT
          echo "tag=v${release_version}" >> $GITHUB_OUTPUT

      - name: Build with Pnpm
        working-directory: apps/studio-client
        run: |
          pnpm -r build
          pnpm -r package

      - name: Build with Maven
        env:
          PLUGINS_NEXUS_USER: ${{ secrets.PLUGINS_NEXUS_USER }}
          PLUGINS_NEXUS_PASSWORD: ${{ secrets.PLUGINS_NEXUS_PASSWORD }}
        run: mvn --batch-mode --update-snapshots verify

      - name: Push Release Tag
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: git push --tags

      - name: Create Bundle
        id: create_bundle
        env:
          VERSION: ${{ steps.set-release-version.outputs.version }}
          DESCRIPTOR_TEMPLATE: 'query-service.json'
          RELEASE_TAG: ${{ steps.set-release-version.outputs.tag }}
          URL_PATTERN: 'https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/${REL_FILE}'
        run: |
          mkdir -p target/bundle
          RESULT="$(cat ${DESCRIPTOR_TEMPLATE})"
          APPS=$(jq -r '.plugins | keys[]' ${DESCRIPTOR_TEMPLATE})
          for APP in ${APPS}; do
            FILE_TEMPLATE=$(jq -r --arg APP "${APP}" '.plugins[$APP].file' ${DESCRIPTOR_TEMPLATE})
            FILE=$(eval echo ${FILE_TEMPLATE})
            REL_FILE=$(basename "${FILE}")
            cp "${FILE}" target/bundle
            URL=$(eval echo ${URL_PATTERN})
            RESULT=$(echo "${RESULT}" | jq -r --arg APP "${APP}" --arg URL "${URL}" '.plugins[$APP] = {"url": $URL}')
          done
          echo "${RESULT}" > "target/bundle/query-service-${VERSION}.json"

      - name: Set Next Snapshot Version
        if: ${{ github.event.inputs.dry_run == 'false' }}
        id: set-snapshot-version
        env:
          PLUGINS_NEXUS_USER: ${{ secrets.PLUGINS_NEXUS_USER }}
          PLUGINS_NEXUS_PASSWORD: ${{ secrets.PLUGINS_NEXUS_PASSWORD }}
        run: |
          mvn --batch-mode org.codehaus.mojo:versions-maven-plugin:2.8.1:set -DnextSnapshot -DartifactId='*'
          snapshot_version=$(mvn --batch-mode org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)

          cd apps/studio-client
          pnpm set-version ${snapshot_version} --dependencyVersion workspace:*
          pnpm install --frozen-lockfile=false
          cd ../..

          git add .
          git commit -m "set next snapshot version: ${snapshot_version}"
          git push
          echo "version=${snapshot_version}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: query-service-${{ steps.set-release-version.outputs.version }}
          path: target/bundle
          if-no-files-found: error

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set-release-version.outputs.version }}
          generate_release_notes: true
          files: |
            target/bundle/*

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.dry_run == 'false' }}
        uses: aws-actions/configure-aws-credentials@v4
        id: assume-role
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CI_GITHUB_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY_CI_GITHUB_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.AWS_S3_PLUGINS_ROLE_ARN_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_S3_PLUGINS_EXTERNAL_ID }}
          role-duration-seconds: 900
          role-skip-session-tagging: true

      - name: Push Release to S3
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          find target/bundle -type f -maxdepth 1 -exec aws s3 cp --sse AES256 {} s3://io.coremedia.plugins.eu-west-1/coremedia/query-service-plugin/${{ steps.set-release-version.outputs.version }}/ \;
